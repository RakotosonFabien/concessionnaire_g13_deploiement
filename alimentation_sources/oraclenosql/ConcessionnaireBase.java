package concessionnairebase;

import oracle.kv.KVStore;
import java.util.List;
import java.util.Iterator;
import oracle.kv.KVStoreConfig;
import oracle.kv.KVStoreFactory;
import oracle.kv.FaultException;
import oracle.kv.StatementResult;
import oracle.kv.table.TableAPI;
import oracle.kv.table.Table;
import oracle.kv.table.Row;
import oracle.kv.table.PrimaryKey;
import oracle.kv.ConsistencyException;
import oracle.kv.RequestTimeoutException;
import java.lang.Integer;
import oracle.kv.table.TableIterator;
import oracle.kv.table.EnumValue;
import java.io.File;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;

import java.util.StringTokenizer;
import java.util.ArrayList;
import java.util.List;



/**
 * Cette classe fournit les fonctions nécessaires pour gérer les tables.
 * La fonction void executeDDL(String statement) reçoit en paramètre 
 * une commande ddl et l'applique dans la base nosql.
 * La displayResult affiche l'état de l'exécution de la commande
 * la fonction createTableCritere permet de créer une table critère>.
 */

 
 public class ConcessionnaireBase{
    private final KVStore store;
	private static final String tabMarketing = "MARKETING_G13";
	private static final String tabClient = "CLIENT_G13";
	
	ConcessionnaireBase(){
		String storeName = "kvstore";
		String hostName = "localhost";
		String hostPort = "5000";

		store = KVStoreFactory.getStore
		    (new KVStoreConfig(storeName, hostName + ":" + hostPort));
	}
	
	
	/**
		public void dropTableMarketing()()
		Méthode de suppression de la table marketing si existante.
	*/
	private void dropTableMarketing(){
		String statement = null;
		statement = "DROP TABLE IF EXISTS "+ tabMarketing;
		executeDDL(statement);
	}
	
	/**
		public void dropTableClient()()
		Méthode de suppression de la table client si existante.
	*/
	private void dropTableClient(){
		String statement = null;
		statement = "DROP TABLE IF EXISTS "+ tabClient;
		executeDDL(statement);
	}
	
	/**
		public void createTableMarketing()
		Méthode de création de la table marketing.
	*/
	public void createTableMarketing() {
		String statement = null;
		statement="CREATE TABLE "+ tabMarketing +" ("
		+"ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1 NO CYCLE),"
		+"AGE INTEGER,"
		+"SEXE ENUM(M,F),"
		+"TAUX INTEGER,"
		+"SITUATIONFAMILIALE STRING,"
		+"NBENFANTSACHARGE INTEGER,"
		+"DEUXIEMEVOITURE BOOLEAN,"
		+"PRIMARY KEY (ID))";
		executeDDL(statement);
	}
	
	// /**
		// public void createTableClient()
		// Méthode de création de la table client.
	// */
	// public void createTableClient() {
		// String statement = null;
		// statement="CREATE TABLE "+ tabClient +" ("
		// +"ID LONG GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1 NO CYCLE),"
		// +"AGE INTEGER,"
		// +"SEXE ENUM(M,F),"
		// +"TAUX INTEGER,"
		// +"SITUATIONFAMILIALE STRING,"
		// +"NBENFANTSACHARGE INTEGER,"
		// +"DEUXIEMEVOITURE BOOLEAN,"
		// +"IMMATRICULATION STRING,"
		// +"PRIMARY KEY (ID))";
		// executeDDL(statement);
	// }
	
	
	/**
		private void insertMarketingRow(int age, String sexe, int puissance, String situationFamiliale, int nbEnfantsAcharge, boolean deuxiemeVoiture)
		Cette méthode insère une nouvelle ligne dans la table marketing
	*/
	private void insertMarketingRow(int age, String sexe, int taux, String situationFamiliale, int nbEnfantsAcharge, boolean deuxiemeVoiture){
		try {
			TableAPI tableH = store.getTableAPI();
			Table tableMarketing = tableH.getTable(tabMarketing);
			
			Row marketingRow = tableMarketing.createRow();
		
			marketingRow.put("age", age);
			marketingRow.putEnum("sexe", sexe);
			marketingRow.put("taux", taux);
			marketingRow.put("situationFamiliale", situationFamiliale);
			marketingRow.put("nbEnfantsAcharge", nbEnfantsAcharge);
			marketingRow.put("deuxiemeVoiture", deuxiemeVoiture);
			
			tableH.put(marketingRow, null, null);
		}catch (IllegalArgumentException e) {
			System.out.println("Invalid statement:\n" + e.getMessage());
		}catch (FaultException e) {
			System.out.println("Statement couldn't be executed, please retry: " + e);
		}
	}
	
	// /**
		// private void insertClientRow(int age, String sexe, int puissance, String situationFamiliale, int nbEnfantsAcharge, boolean deuxiemeVoiture, String immatriculation)
		// Cette méthode insère une nouvelle ligne dans la table client
	// */
	// private void insertClientRow(int age, String sexe, int taux, String situationFamiliale, int nbEnfantsAcharge, boolean deuxiemeVoiture, String immatriculation){
		// try {
			// TableAPI tableH = store.getTableAPI();
			// Table tableClient = tableH.getTable(tabMarketing);
			
			// Row clientRow = tableClient.createRow();
		
			// clientRow.put("age", age);
			// clientRow.putEnum("sexe", sexe);
			// clientRow.put("taux", taux);
			// clientRow.put("situationFamiliale", situationFamiliale);
			// clientRow.put("nbEnfantsAcharge", nbEnfantsAcharge);
			// clientRow.put("deuxiemeVoiture", deuxiemeVoiture);
			// clientRow.put("immatriculation", immatriculation);
			
			// tableH.put(clientRow, null, null);
		// }catch (IllegalArgumentException e) {
			// System.out.println("Invalid statement:\n" + e.getMessage());
		// }catch (FaultException e) {
			// System.out.println("Statement couldn't be executed, please retry: " + e);
		// }
	// }

	
	/**
	* Affichage du résultat pour les commandes DDL (CREATE, ALTER, DROP)
	*/

	private void displayResult(StatementResult result, String statement) {
		System.out.println("===========================");
		if (result.isSuccessful()) {
			System.out.println("Statement was successful:\n\t" +
			statement);
			System.out.println("Results:\n\t" + result.getInfo());
		} else if (result.isCancelled()) {
			System.out.println("Statement was cancelled:\n\t" +
			statement);
		} else {
			if (result.isDone()) {
				System.out.println("Statement failed:\n\t" + statement);
				System.out.println("Problem:\n\t" +
				result.getErrorMessage());
			}
			else {

				System.out.println("Statement in progress:\n\t" +
				statement);
				System.out.println("Status:\n\t" + result.getInfo());
			}
		}
	}
	
	/**
		La méthode initConcessionnaireTablesAndData permet :
		- de supprimer les tables si elles existent
		- de créer des tables
	*/

	public void initConcessionnaireTablesAndData() {
		this.dropTableMarketing();
		// this.dropTableClient();
		this.createTableMarketing();
		// this.createTableClient();
	}

	
	/**
		public void executeDDL(String statement)
		méthode générique pour executer les commandes DDL
	*/
	public void executeDDL(String statement) {
		TableAPI tableAPI = store.getTableAPI();
		StatementResult result = null;
		
		try {
			result = store.executeSync(statement);
			displayResult(result, statement);
		} catch (IllegalArgumentException e) {
			System.out.println("Invalid statement:\n" + e.getMessage());
		} catch (FaultException e) {
			System.out.println("Statement couldn't be executed, please retry: " + e);
		}
	}
	
	
	/**
		void loadMarketingDataFromFile(String marketingFileName, boolean headerline)
		cette methode permet de charger les clients choisis par le service marketing 
		depuis le fichier mis en argument, avec headerline pour signaler la présence d'une ligne header 
	*/
	void loadMarketingDataFromFile(String marketingFileName, boolean headerline){
		InputStreamReader 	ipsr;
		BufferedReader 		br=null;
		InputStream 		ips;
		String ligne; 
		System.out.println("==> import du fichier "+marketingFileName+" dans OracleNosql");
		try {
			ips  = new FileInputStream(marketingFileName); 
			ipsr = new InputStreamReader(ips); 
			br   = new BufferedReader(ipsr); 
			long compte = 0;
			if(headerline){
				br.readLine();
			}
			System.out.println("**** Import des données du fichier "+marketingFileName+" dans la table "+tabMarketing);
			while ((ligne = br.readLine()) != null){ 

				ArrayList<String> marketingRecord= new ArrayList<String>();	
				StringTokenizer val = new StringTokenizer(ligne,",");
				while(val.hasMoreTokens()){ 
					marketingRecord.add(val.nextToken().toString()); 
				}
				int age						= Integer.parseInt(marketingRecord.get(0));
				String sexe					= marketingRecord.get(1);
				int taux					= Integer.parseInt(marketingRecord.get(2));
				String situationFamiliale	= marketingRecord.get(3);
				int nbEnfantsAcharge 		= Integer.parseInt(marketingRecord.get(4));
				boolean deuxiemeVoiture		= Boolean.parseBoolean(marketingRecord.get(5));
				
				this.insertMarketingRow(age, sexe, taux, situationFamiliale, nbEnfantsAcharge, deuxiemeVoiture);
				compte ++;
			}
			System.out.println("=> "+compte +" lignes insérées dans la table "+tabMarketing);
		}
		catch(Exception e){
			e.printStackTrace(); 
		}
	}
	
	// /**
		// void loadClientDataFromFile(String marketingFileName, boolean headerline)
		// cette methode permet de charger les clients choisis par le service marketing 
		// depuis le fichier mis en argument, avec headerline pour signaler la présence d'une ligne header 
	// */
	// void loadClientDataFromFile(String clientFileName, boolean headerline){
		// InputStreamReader 	ipsr;
		// BufferedReader 		br=null;
		// InputStream 		ips;
		// String ligne; 
		// System.out.println("==> import du fichier "+clientFileName+" marketing dans OracleNosql");
		// try {
			// ips  = new FileInputStream(clientFileName); 
			// ipsr = new InputStreamReader(ips); 
			// br   = new BufferedReader(ipsr); 
			// long compte = 0;
			// if(headerline){
				// br.readLine();
			// }
			// System.out.println("**** Import des données du fichier "+clientFileName+" dans la table "+tabClient);
			// while ((ligne = br.readLine()) != null){ 

				// ArrayList<String> clientRecord= new ArrayList<String>();	
				// StringTokenizer val = new StringTokenizer(ligne,",");
				// while(val.hasMoreTokens()){ 
					// clientRecord.add(val.nextToken().toString()); 
				// }
				// int age						= Integer.parseInt(clientRecord.get(0));
				// String sexe					= clientRecord.get(1);
				// int taux					= Integer.parseInt(clientRecord.get(2));
				// String situationFamiliale	= clientRecord.get(3);
				// int nbEnfantsAcharge 		= Integer.parseInt(clientRecord.get(4));
				// boolean deuxiemeVoiture		= Boolean.parseBoolean(clientRecord.get(5));
				// String immatriculation		= clientRecord.get(6);
				
				// this.insertClientRow(age, sexe, taux, situationFamiliale, nbEnfantsAcharge, deuxiemeVoiture, immatriculation);
				// compte ++;
			// }
			// System.out.println("=> "+compte +" lignes insérées dans la table "+tabClient);
		// }
		// catch(Exception e){
			// e.printStackTrace(); 
		// }
	// }
	
	private static void paramsUsage(final String message){
        if (message != null) {
            System.out.println("\n" + message + "\n");
        }

        System.out.println("usage: ");
        System.out.println
            ("\t-init                                   Initialisation de la base de données\n\n" +
             "\t--import                                Importer des données de fichiers dans une table\n\n" +
             "\t  -table=<tablename>                    Le nom de la table dans laquelle importer les données du fichier.\n\n" +
             "\t  -file=<filename>,...,<filenameN>      Le(s) fichier(s) à importer séparés par des virgules.\n\n" +
             "\t  -headerline                           Les premières lignes des fichiers de l'import ne sont pas à considérer\n" +
             "\t                                        -headerline ne sera pris en compte que pour l'import auquel il est rattaché\n\n"+
             "ex: -init --import -table=marketing -file=d:/marketing1.csv,d:/marketing2.csv -headerline --import -table=vehicules -file=d:/vehicules.csv\n"+
             "\t.Initialisation de la base de données et création des tables \n"+
             "\t.Import des données dans la table marketing SANS la première ligne de chaque fichier\n"+
             "\t.Import des données dans la table vehicules AVEC la première ligne de chaque fichier");
    }
	
    public static void main(String args[]) {
        try {
			boolean init = false;
			
			ArrayList<String> arg = new ArrayList<String>();
			for(String s: args){
				arg.add(s);
			}        
			
			List<Object[]> imports = new ArrayList();
			
			while(arg.contains("--import")){
				int index = arg.lastIndexOf("--import");
				List<String> sub = arg.subList(index, arg.size());
				sub.remove(0);
				String[] importParams = sub.toArray(new String[0]);
				sub.clear();

				String table = null;
				String[]fichiers = null;
				boolean header = false;

				List<String> required = new ArrayList();
				required.add("-table");
				required.add("-file");

				for(String param : importParams){
					if(param.startsWith("-table=")){
					   String[]tsplit=param.split("=");
					   if(tsplit.length==1){
							paramsUsage("Erreur: Paramètre non valable pour -table, le nom de table est manquant");
							System.exit(1);
					   }
					   table = tsplit[1];
					   required.remove("-table");
					}else if(param.startsWith("-file=")){
						String[]fsplit = param.split("=");
						if(fsplit.length==1){
							paramsUsage("Erreur: Paramètre non valable pour -fichier, le nom de fichier est manquant");
							System.exit(1);
						}
						fichiers = fsplit[1].split(",");
						required.remove("-file");
				   }else if(param.startsWith("-headerline")){
					   header = true;
				   }else{
					   paramsUsage("erreur: Paramètre inconnu ou non valable: "+param);
					   System.exit(1);
				   }
				}
				if(!required.isEmpty()){
					String manquants = "";
					for(String s: required){
						manquants = manquants.concat(s+", ");
					}
					manquants = manquants.substring(0, manquants.length());
					paramsUsage("Erreur: Paramètres d'import manquants: "+ manquants);
					System.exit(1);
				}
				for(String fichier : fichiers){
					Object[] imp = {table, fichier, header};
					imports.add(imports.isEmpty()? 0: imports.size()-1, imp);
				}
			}
			
			while(!arg.isEmpty()){	
				String current = arg.remove(arg.size()-1);
				if(current.equals("-init")){
					init = true;
				}else{
					paramsUsage("Erreur: Paramètre inconnu: "+current);
					System.exit(1);
				}
			}
			
			
			ConcessionnaireBase cb = new ConcessionnaireBase();
			if(init){
				cb.initConcessionnaireTablesAndData();
			}
			for(Object[] imp : imports){
				String table = (String)imp[0];
				String filename = (String)imp[1];
				boolean headerline = (boolean) imp[2];
				if(table.equals(tabMarketing)){
					cb.loadMarketingDataFromFile(filename, headerline);
				}else{
					System.out.println("Aucune table correspondante à "+table);
					System.exit(1);
				}
			}
			
        } catch (RuntimeException e) {
            e.printStackTrace();
        }
    }
 }